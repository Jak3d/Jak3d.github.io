{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"content is-medium\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<h2 class=\\\"subtitle is-3\\\"> Lez 3?!!! </h2><p> Usando il valore di ptr si può accedere al valore memorizzato nella variabile i, pur essendo questo passaggio possibile, tale azione risulta più lento, in quanto esegue una multipla lettura. Più sono i puntatori, più è lunga la &quot;catena&quot; aumentando il tempo necessario per leggere il valore della variabile. <br> In ogni modo bisogna utilizzare la deferenzazione per ottenere il valore in sé. <br> int a = *ptr + 20 (in Questo caso avremmo aumentato il valore di i di 20; abbiamo derefenziato ptr con *). </p><h2 class=\\\"subtitle is-4\\\"> Operazioni di controllo flusso </h2><p> DA SISTEMARE AL MOMENTO E&#39; ORRIBILE <br> While(expt){ <br> ..... <br> } do { <br> .... <br> } <br> while(exp); for (expr;expr;expr) {} Notare che un&#39;espressione con valore 0 vale False, un&#39;espressione con valore diverso da 0 vale True. While(1){} //causerà un ciclo infinito. While(a){} //ciclo finchè a != 0. While(a=n){} //assegnamento, finche a=n è diverso da 0. for(i=0; no_registered(); i++){}. </p><p>Example: <br> if(ptr!= NULL &amp;&amp; *ptr==10){<br> ... <br> } <br> else{ <br> ... <br> } <br></p><code> Switch(expr){ case a: ...; } ; </code><p> MAI USARE: <br> goto label; <br> label: ..... </p><p> .... break; //comporta l&#39;uscita dal ciclo interno attivo (Non esce da tutti i cicli annidati) </p><p> Quando viene dichiarata una stringa (char *str =&#39;Hello World&#39;) essendo un array di char, viene aggiunto anche il carattere di fine stringa: <strong> &quot;\\\\0&quot; </strong> come ultimo carattere della stringa. <br> Ogni carattere della stringa avrà il corrispondente valore <strong> ASCII</strong> per indicarne la lettere o il simbolo. char *str &quot;Punterà&quot; <strong>Solo</strong> al primo carattere della stringa; per ottenere H sarà necessario deferenziare la variabile mentre per i successivi bisognerà <strong>sommare</strong> la posizione richiesta all&#39;indirizzo. <br> *str + 6 == W; //Darà True </p><p> Esercizio: Srivere un programma che analizza un testo carattere per carattere e in caso trovi un carattere maiuscolo, la trasforma in minuscolo. </p>\", 10);\n\nconst _hoisted_12 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_12);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;;;;;qBACPC;;uBADJC,oBAgEM,KAhEN,cAgEMC,WAhEN","names":["class","_hoisted_2","_createElementBlock","_hoisted_12"],"sourceRoot":"","sources":["C:\\Users\\marro\\Documents\\GitHub\\LeonardoMarro\\src\\components\\SoLab.vue"],"sourcesContent":["<template>\r\n    <div class=\"content is-medium\">\r\n        <h2 class=\"subtitle is-3\"> Lez 3?!!! </h2>\r\n        <p>\r\n            Usando il valore di ptr si può accedere al valore memorizzato nella variabile i, pur essendo questo\r\n            passaggio\r\n            possibile, tale azione\r\n            risulta più lento, in quanto esegue una multipla lettura. Più sono i puntatori, più è lunga la \"catena\"\r\n            aumentando il tempo\r\n            necessario per leggere il valore della variabile. <br> In ogni modo bisogna utilizzare la deferenzazione per\r\n            ottenere\r\n            il valore in sé. <br>\r\n            int a = *ptr + 20 (in Questo caso avremmo aumentato il valore di i di 20; abbiamo derefenziato ptr con *).\r\n        </p>\r\n        <h2 class=\"subtitle is-4\"> Operazioni di controllo flusso </h2>\r\n        <p>\r\n            DA SISTEMARE AL MOMENTO E' ORRIBILE <br>\r\n            While(expt){ <br> ..... <br> }\r\n            do { <br> .... <br> } <br> while(exp);\r\n            for (expr;expr;expr) {}\r\n\r\n            Notare che un'espressione con valore 0 vale False, un'espressione con valore diverso da 0 vale True.\r\n            While(1){} //causerà un ciclo infinito.\r\n            While(a){} //ciclo finchè a != 0.\r\n            While(a=n){} //assegnamento, finche a=n è diverso da 0.\r\n            for(i=0; no_registered(); i++){}.\r\n        </p>\r\n        <p>Example: <br>\r\n            if(ptr!= NULL && *ptr==10){<br>\r\n            ... <br>\r\n            } <br>\r\n            else{ <br>\r\n            ... <br>\r\n            } <br>\r\n        </p>\r\n        <code>\r\n        Switch(expr){\r\n            case a: ...;\r\n            } ;\r\n    </code>\r\n        <p>\r\n            MAI USARE: <br>\r\n            goto label; <br>\r\n\r\n            label: .....\r\n        </p>\r\n        <p>\r\n            .... break; //comporta l'uscita dal ciclo interno attivo (Non esce da tutti i cicli annidati)\r\n        </p>\r\n        <p>\r\n            Quando viene dichiarata una stringa (char *str ='Hello World') essendo un array di char, viene aggiunto\r\n            anche\r\n            il carattere di fine stringa: <strong> \"\\0\" </strong> come ultimo carattere della stringa. <br>\r\n            Ogni carattere della stringa avrà il corrispondente valore <strong> ASCII</strong> per indicarne la lettere\r\n            o il simbolo.\r\n            char *str \"Punterà\" <strong>Solo</strong> al primo carattere della stringa; per ottenere H sarà necessario\r\n            deferenziare\r\n            la variabile mentre per i successivi bisognerà <strong>sommare</strong> la posizione richiesta\r\n            all'indirizzo. <br>\r\n            *str + 6 == W; //Darà True\r\n        </p>\r\n        <p>\r\n            Esercizio: Srivere un programma che analizza un testo carattere per carattere e in caso trovi un carattere\r\n            maiuscolo, la trasforma in minuscolo.\r\n        </p>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: 'SoLabPage'\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}