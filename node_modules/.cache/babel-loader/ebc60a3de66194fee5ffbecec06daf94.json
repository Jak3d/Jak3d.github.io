{"ast":null,"code":"import Prism from \"prismjs\";\nimport \"../../node_modules/prismjs/components/prism-c\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nexport default {\n  name: \"SoLabPage\",\n\n  data() {\n    return {\n      Es_1: false,\n      Es_A9: false\n    };\n  },\n\n  // mounted\n  methods: {\n    openCard(card) {\n      switch (card) {\n        case 'Es_1':\n          this.Es_1 = !this.Es_1;\n          console.log(this.Es_1);\n          break;\n\n        case 'Es_A9':\n          this.Es_A9 = !this.Es_A9;\n          console.log(this.Es_A9);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n  },\n  props: {},\n\n  mounted() {\n    window.Prism = window.Prism || {};\n    window.Prism.manual = true;\n    Prism.highlightAll(); // highlight your code on mount\n  }\n\n};","map":{"version":3,"mappings":"AA8bA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAO,+CAAP;AACA,OAAO,mCAAP;AACA,eAAe;EACbC,IAAI,EAAE,WADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,IAAI,EAAE,KADD;MAELC,KAAK,EAAC;IAFD,CAAP;EAID,CAPY;;EASb;EACAC,OAAO,EAAE;IACPC,QAAQ,CAACC,IAAD,EAAO;MACb,QAAQA,IAAR;QACE,KAAK,MAAL;UACE,KAAKJ,IAAL,GAAY,CAAC,KAAKA,IAAlB;UACAK,OAAO,CAACC,GAAR,CAAY,KAAKN,IAAjB;UACA;;QACF,KAAK,OAAL;UACE,KAAKC,KAAL,GAAY,CAAC,KAAKA,KAAlB;UACAI,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;UACA;;QAEF;UACE;MAXJ;IAaF;;EAfO,CAVI;EA2BbM,KAAK,EAAE,EA3BM;;EA8BbC,OAAO,GAAG;IACRC,MAAM,CAACZ,KAAP,GAAeY,MAAM,CAACZ,KAAP,IAAgB,EAA/B;IACAY,MAAM,CAACZ,KAAP,CAAaa,MAAb,GAAsB,IAAtB;IACAb,KAAK,CAACc,YAAN,GAHQ,CAGc;EACvB;;AAlCY,CAAf","names":["Prism","name","data","Es_1","Es_A9","methods","openCard","card","console","log","props","mounted","window","manual","highlightAll"],"sourceRoot":"","sources":["C:\\Users\\marro\\OneDrive\\Desktop\\LeonardoMarro-master\\src\\components\\SoLab.vue"],"sourcesContent":["<template>\n  <div class=\"content is-medium\">\n    <h3 class=\"subtitle is-3\">Lez 3</h3>\n    <p>\n      Usando il valore di ptr si può accedere al valore memorizzato nella\n      variabile i, pur essendo questo passaggio possibile, tale azione risulta\n      più lento, in quanto esegue una multipla lettura. Più sono i puntatori,\n      più è lunga la \"catena\" aumentando il tempo necessario per leggere il\n      valore della variabile. <br />\n      In ogni modo bisogna utilizzare la deferenzazione per ottenere il valore\n      in sé. <br />\n      <code class=\"language-c\"> int a = *ptr + 20 </code> (in Questo caso avremmo aumentato il valore di i di 20;\n      abbiamo derefenziato ptr con *).\n    </p>\n    <h2 class=\"subtitle is-4\">Operazioni di controllo flusso</h2>\n\n    DA SISTEMARE AL MOMENTO E' ORRIBILE <br />\n    <pre><code class=\"language-c\">\nWhile(expt){\n ..... \n } do { \n .... \n};\n    </code></pre>\n    <pre><code class=\"language-c\">\n\n    </code></pre>\n    <pre><code class=\"language-c\">\nwhile(exp){\n\n};\nfor (expr;expr;expr) {\n\n};\n    </code></pre>\n    <p>\n      Notare che un'espressione con valore 0\n      vale False, un'espressione con valore diverso da 0 vale True. <code class=\"language-c\">While(1){}</code>\n      //causerà un ciclo infinito. <code class=\"language-c\"> While(a){}</code> //ciclo finchè a != 0.\n      <code class=\"language-c\">While(a=n){} </code>//assegnamento, finche a=n è diverso da 0. <code class=\"language-c\"> for(i=0;\n      no_registered(); i++){} </code>.\n    </p>\n    <p>\n      Example:\n    <pre><code class=\"language-c\">\nif(ptr!= NULL && *ptr==10){\n    ... \n} \nelse{ \n    ... \n} \n        </code></pre>\n\n    </p>\n    <pre><code class=\"language-c\">\n#include\nint main(){\n    int i = 5;\n}\n    </code></pre>\n    <pre><code class=\"language-c\">\nSwitch(expr){\n    case a: ...; \n}; \n    </code></pre>\n\n    <p>\n      MAI USARE LABEL: <br />\n    <pre><code class=\"language-c\">\ngoto label; <br />\n... \n...\nlabel: \n    </code></pre>\n\n    </p>\n    <p>\n      <code class=\"language-c\"> .... break; </code> //comporta l'uscita dal ciclo interno attivo (Non esce da\n      tutti i cicli annidati)\n    </p>\n    <p>\n      Quando viene dichiarata una stringa (<code class=\"language-c\"> char *str ='Hello World'</code> ) essendo un\n      array di char, viene aggiunto anche il carattere di fine stringa:\n      <strong> \"\\0\" </strong> come ultimo carattere della stringa. <br />\n      Ogni carattere della stringa avrà il corrispondente valore\n      <strong> ASCII</strong> per indicarne la lettere o il simbolo. char *str\n      \"Punterà\" <strong>Solo</strong> al primo carattere della stringa; per\n      ottenere H sarà necessario deferenziare la variabile mentre per i\n      successivi bisognerà <strong>sommare</strong> la posizione richiesta\n      all'indirizzo.\n      <code class=\"language-c\">\n*str + 6 == W; //Darà True\n</code>\n\n    </p>\n    <p>\n      Esercizio: Srivere un programma che analizza un testo carattere per\n      carattere e in caso trovi un carattere maiuscolo, la trasforma in\n      minuscolo.\n    </p>\n    <div class=\"button\" @click=\"openCard('Es_1')\"> Da sostituire ad icona </div>\n    <div :style=\"[Es_1 === false ? 'display:none;' :'' ]\">\n      <pre> <code class=\"language-c\">\nint isuppercase(char c){\n  return c>'A' && c &lt;= 'Z';\n};\nchar tolowercase(char c){\n  return c-('A' - 'a');\n};\nint main(){\n  char c;\n  char *s = \"Hello woRLd! Today's temperature is 34C.\";\n  c=*s;\n  while(c!='\\0'){\n    if(isuppercase(*c)){\n      putchar( tolowercase(c));\n    }\n    else{ \n      putchar(c);\n    }\n    c=*s++;\n  }\n}\n    </code></pre>\n    </div>\n\n    <h3 class=\"subtitle is-3\"> Lezione 4 </h3>\n    <h4 class=\"subtitle is-4\"> Simbolismi in Stringa </h4>\n    <pre> <code class=\"language-c\">\n      \n//all in strings\n\"\\n : line feed\";\n\"\\r : carriage return\";\n\"\\t : tabulazione\";\n\"\\f : format feed\";\n\"\\b : backspace\";\n\"\\\\ : carattere \\\";\n\"\\\" : carattere \" \";\n\"%% : carattere %\";\n\n//Alcuni sistemi operativi usano codifiche \n//differenti per il fine linea:\nWindows: \"\\r \\n\";\nUNIX: \"\\n\";\nMachintosh: \"\\r\";\n</code></pre>\n    <h4 class=\"subtitle is-4\"> Caratteri di controllo in Stringa </h4>\n    <p>\n      La stringa può anche possedere dei <strong> caratteri di controllo </strong> designati da %.\n    </p>\n\n    <pre><code class=\"language-c\">\n    \"%d %i per gli interi\";\n    \"%u per gli interi unsigned\";\n    \"%ld per gli interi long\";\n    \"%c per i caratteri\";\n    \"%s per le stringhe\";\n    \"%f %lf per i float ed i double\";\n    \"%e %E notazione esponenziale\";\n    \"%g %G\";\n    \"%p per i valori puntatori\"; \n  </code></pre>\n    <p>\n      I caratteri di formato possono essere preceduti da due numeri separati da un punto (n.m). Essi indicano quante\n      cifre usare rispettivamente per la parte intera e decimale di un numero.\n      Esempio:\n    </p>\n    <pre>\n    <code class=\"language-c\"> \ndouble r = rand()/(double)RAND_MAX; \nprintf(\"Inserisci il numero di bytes da allocare: \\n\")\nscanf(\"%d\",&n); </code></pre>\n    <h3 class=\"subtitle is-4\"> Input e Output formattato </h3>\n\n    <p>\n      La funzione scanf() legge dallo <strong> stream dei dati</strong> associato allora standard input (stdin):\n    </p>\n    <pre><code class=\" language-c\">\n  #include &lt;stdio.h&gt;\n  int scanf(const char *format,  .... );\n      </code></pre>\n    <p>\n      Ogni argomento puntatore deve essere di un tipo appropriato per il valore restituito dalla corrispondente\n      specifica di conversione.\n      Esempio:\n      </p>\n    <pre><code class=\"language-c\"> \n//Per far uscire il programma dal ciclo (stream di input) premere CTRL+D\nint n; //size in bytes\nprintf(\"Inserisci numero bytes da allocare \\n\");\nscanf(\"%d\",&n);\n//Stamperà a video il numero di caratteri inseriti\n        </code></pre>\n        <p>\n    Legge dallo stream di input la prima parola presente e la converte in decimale <strong> %d</strong>. Se la\n    conversione ha successo il valore è restituito in n attraverso il puntatore alla variabile. <br>\n    Effettivamente <strong>traduce </strong> i caratteri numerici in valori integer (quando possibile, non accetta\n    caratteri alfabetici).\n    </p>\n    <pre> <code class=\"language-c\">\nlong cnt;\nchar c;\nprintf(\"Inserire una stringa e premere CTRL+D per terminare.\")\nfor (cnt=0; scanf(\"%c\",&c)!= EOF; cnt++){\n  //Scanf ignora gli spazi bianchi\n  ;\n}\nprintf(\"Il testo che ha inserito contiene %i caratteri \\n\",cnt)\n  </code></pre>\n    <p>\n      Lo scanf verrà subito eseguito ad una velocità estremamente elevata, ma con elemento vuoto, allora si mette in\n      attesa e blocca la code dei processi. La tastiera è gestita dal <strong>SO</strong> ed è quella che attraverso gli\n      interrupt, invia i dati inseriti dalla tastiera. Tutto quello che viene inserito nella tastiera viene salvato nel\n      <strong>Buffer </strong> e poi con invio, viene salvata in qualche punto della memoria. <br>\n      <strong> Ripassare sincronizzazione attraverso SO</strong>. LO Stream vuoto <strong> non è </strong> uno stream chiuso.\n      Lo stream chiuso, invece, lo scanf restituisce <strong> EOF </strong>(End of File).\n    </p>\n    <h3 class=\"subtitle is-4\"> Accensione del Computer</h3>\n    <h3 class=\"subtitle is-2\"> Lezione 4</h3>\n    <h3 class=\"subtitile is-4\">Definizioni</h3>\n    <p> La direttiva #define definisce nomi simbolici per valori restuali utilizzabili dal programma.</p>\n    <pre><code class=\"language-c\">\n      #define MAX_NO_STUDENTS 100;\n      for(i=0; i &lt; MAX_NO_STUDENTS){\n        ...\n      }\n    </code></pre>\n    <p>Se una costante simbolica è utilizzata in più mosuli sorgente C serve creare un nuovo file <strong>Intestazione</strong>. </p>\n    <pre><code class=\"language-c\">\n      #define MAX_NO_STUDENTS 100\n      #define CLASSROOM_A_CAPACITY 40\n      #define OVERFLOW (MAX_NO_STUDENTS - CLASSROOM_A_CAPACITY)\n    </code></pre>\n    <p>\n      Il nome di un simbolo ha un numero limitato di caratteri.\n    </p>\n    <div>\n      <p>Nota: Un header personalizzato non si include con &lt; &gt;, ma indicandone il path relativo o assoluto con \" \".</p>\n    </div>\n    <h3 class=\"subtitle is-4\">Doppie incusioni</h3>\n    <p>\n      \n      Inlusioni di definizio, possono contenere ulteriori inclusioni dentro di loro, causando possibbili <strong>Doppie inclusioni</strong> \n      nello stesso codice. <br>\n      <pre><code class=\"language-c\"> \n        #ifndef _MATH_MACRO_H \n        // controlla se esiste già le definizione (if not def)\n          #define _MATH_MACRO_H\n          ...\n          ... \n        #endif\n      </code></pre>\n    </p>\n    <h3 class=\"subtitle is-4\">Global Variables (Static,External)</h3>\n    <p>Le variabili globali sono allocate in fase si compilazione e sono visibili anche da mosuli diversi da quello in cui è definita.\n      <br> Se uso <code class=\"language-c\"> static int a;</code>, la variabile \"a\" sarà visibile solo in tutte le parti del programma. <br>\n      Se uso <code class=\"language-c\">extern int b;</code>, la variabile \"b\" sarà visibile in qualsiasi modulo esterno, <strong> previa definizione</strong>.\n    </p>\n    <h4 class=\"subtitle is-4\">sizeof()</h4>\n    <p>In alcune occasioni è necessario determinare la dimensione di un espressione o di un tipo in termini di Byte</p>\n    <pre><code class=\"language-c\">\n      sizeof(int);\n      sizeof(char);\n      sizeof(*int);\n    </code></pre>\n    <h3>Le Strutture di dati</h3>\n    <p>Le strutture C sono:\n      <ul>\n        <li>-Gli Array (Sono allocati staticamente al momento di compilazione)(Diverso da JAVA!) <pre><code class=\"language-c\">\nint a[10];\nchar *msg = \"OK you entered\"; //Punta ad una seguenza di caratteri (al primo elem)\nchar str[] = {'H','e','l','l','o', '\\0'}; //ricordare lo \"\\0\"\nchar *weekdays[] = {\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\"}; //Array di puntatori a \"Stringhe\" (sono sempre char)\n        </code></pre></li>\n        <li>-Lo Struct (Riempito con dei <strong> Campi </strong>) <pre><code class=\"language-c\">\n//definizione di una struttura\nstruct student{ \n  int matr;\n  char *firstName;\n  char *lastName;\n  int voti[40];\n  struct address adr; //definito da qualche parte\n}\n//definizione di dati con struttura student\nstruct student pippo,pluto,paperino;\n        </code></pre></li>\n      </ul>\n    </p>\n    <p>(C'era un bel disegno su array di stringhe (array di puntatori a stringhe): Ricopiare)</p>\n    <p>Metodo alternativo per definire un array: <br> <code class=\"language-c\"> char *weekdays_b = \"Mon\\Tue\\Wed\\Thu\\Fri\\0\"</code> </p>\n    <p>In C il nome di un array indica l'indirizzo del primo elemento</p>\n    <ul>\n      <li>a,*a, a[0] indicano il primo elemento</li>\n      <li>a[3],*(a+3)</li>\n      <li>&a[4],a+4</li>\n    </ul>\n    <p>Non si può modificare \"a\" in quanto il nome è una variabile di tipo <strong> Const</strong></p>\n\n\n<h3 class=\"subtitle is-3\"> (Lez 4)</h3>\n<p>\n  \n</p>\n<h3 class=\"subtitle is-3\"> (Lez 6) </h3>\n<h3 class=\"subtitle is-4\"> Accesso file attraverso stream stdio</h3>\n<p>\n  <code class=\"language-c\"> FILE *f = fopen (\"./DivinaCommedia.txt\")</code> <br> La <strong>fopen</strong> restituisce un puntatore \n  allo stream  di tipo *FILE. Esso deve essere usato per le seguenti operazioni:\n</p>\n  <pre><code class=\"language-c\">\n    fread();\n    fwrite();\n    fgets();\n    fgetc();\n    fclose();\n    fseek();\n    fscanf();\n    fprintf();\n  </code></pre>\n\n\n<p>\n  Nel stdio.h sono definiti diversi stream:\n</p>\n  <pre><code class=\"language-c\">\n  extern FILE *stdin; //standard input, descrittore 0, input file associato al terminale se non specificato altrimenti\n                      //per leggere file devo assegnargli fopen del file in questione\n  extern FILE *stdout; //standard output, descrittore 1\n  extern FILE *stderr; //standard error, descrittore 2\n  </code></pre>\n<p>\n  Questo comporta che i seguenti sono equivalenti:\n</p>\n<pre><code class=\"language-c\">\nint c;\nc = fgetc(stdin); //legge dallo stream\nc = getchar();\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-c\">\n  #include &lt;stdio.h&gt;\n  stdout = fopen(\"./La divina commedia.txt\",\"a\");\n\n  printf(\"Hello World\");\n  frequencies &lt; filein &gt; fileout\n</code></pre>\n<h3 class=\"subtitle is-4\"> Allocazione dinamica della memoria </h3>\n<p> Alcune funzioni della libreria stdlib sono per l'allocazione dinamica della memoria dati. <br> Esse sono \nprincipalmente le seguenti:</p>\n<pre><code class=\"language-c\">\n  void *malloc(size_t size);\n  void *calloc(size_t nmemb, size_t size);\n  void *realloc(void *ptr, size_t size);\n  void free(void *ptr);\n</code></pre>\n<p><strong>~malloc() </strong> (memory alloc) associa <strong>size</strong> bytes dallo heap e restituisce in caso di successo un puntatore alla memoria\nallocata. La memoria allocata <strong> non è inizializzata a 0</strong>.</p>\n<p> <strong>~calloc() </strong> alloca memoria per un array di nmemb elementi ciascun di dimensione bytes. In caso di successo restituisce  un \n  puntatore alla memoria allocata. La memoria allocata <strong>è inizializzata a 0</strong>. Fa il controllo dell'overflow di \n  nmemb*size.\n</p>\n<p>\n  <strong> ~realloc() </strong> modifica la dimensione di un blocco di memoria precedentemente allocato e puntato da ptr alla nuova dimensione\n  {size} bytes. ptr deve essere un puntatore precedentemente restituito da una chiamata a malloc() o calloc() o realloc().\n</p>\n<p>\n  <strong> ~free() </strong>de-alloca il blocco di memoria puntato da ptr e precedentemente allocato con malloc(),callor() o realloc(). \n  In caso di errore o se nessuna allocazione è stata fatta le funzioni malloc(),calloc(),realloc() restituiscono <strong> NULL</strong>.\n</p>\n<p><strong>Allocazione dinamica di uno struct</strong></p>\n<pre><code class=\"language-c\">\nstruct student *donald = (struct student *) malloc(sizeof(struct student));\nif (donald != NULL){\n  donald -> id = 435;\n  donald -> first_name = \"Donald\";\n  donald -> last_name = \"Duck\";\n}\nfree(donald);\n</code></pre>\n<h3 class=\"subtitle is-4\">Implementazione lista in C</h3>\n<p>Le liste sono strutture dati di natura dinamica, hanno due operazioni che sono inserimento (push()) e prelievo (pop()).\n  Per creare una lista useremo gli Struct e l'allocazione dinamica.\n</p>\n<pre><code class=\"language-c\">\n#include \"client.h\"\n\n//definizione di tipo 'l_node' usato per rappresentare i nodi\n\ntypedef struct _node{\n  unsigned int id;\n  client person;\n  struct _node *next;\n} l_node;\n\n//definizione del tipo list_cl\n\ntypedef struct{\n  l_node *head;\n  l_node *tail;\n} list_cl;\n\n#define L_EMPTYLIST_CL {NULL,NULL}\n</code></pre>\n<p>Definizione di una lista vuota:</p>\n<pre><code class=\"language-c\">\n//Variabile utilizzabile soltanto durante la definizione\nlist_cl class=L_EMPTYLIST_CL; \n</code></pre>\n<pre><code class=\"language-c\">\n(Inside cl_list.h)\n//Operazioni sulla lista\nlist_cl l_add_cl(list_cl l, client p); //dichiarazione\nclient l_rem_cl(list_cl l); //rimozione\n//oppure\nlist_cl l_rem_cl(list_cl l, client *p);\n\n(Still inside client.h)\n\n//definizione del tipo 'client'\ntypedef struct{\n  char cf[16]; //codice fiscale\n  char *first_name;\n  char *last_name;\n  address adr; //tipo definito altrove\n} client;\n</code></pre>\n<p>Eseguire esercizi A.9:</p>\n<button @click=\"openCard('Es_A9')\" class=\"button is-warning\">Show Es. A.9</button>\n<div :style=\"[Es_A9 === false ? 'display:none;' : '']\">\n  <p>Implementare le seguenti funzioni sul dato list_cl:</p>\n  <ol>\n    <li>list_cl l_add_cl(list_cl l, client p): aggiunge il cliente p in coda alla\nlista l; restituisce la lista stessa, la lista vuota in caso di errore;</li>\n    <li>client l_rem_cl(list_cl l): restituisce il cliente in testa alla lista l, il cliente\nvuoto se la lista è vuota;</li>\n    <li>int l_is_empty(list_cl l) restituisce 1 se e solo se la lista l è vuota;</li>\n    <li>list_cl l_clear(list_cl l) rimuove tutti gli elementi dalla lista l\nrilasciando le risorse allocate per essi; restituisce la lista vuota;</li>\n    <li>int l_length(lists_cl l) restituisce il numero di elementi nella lista l.</li>\n  </ol>\n</div>\n  </div>\n\n\n</template>\n<script>\nimport Prism from \"prismjs\";\nimport \"../../node_modules/prismjs/components/prism-c\";\nimport \"prismjs/themes/prism-tomorrow.css\"; \nexport default {\n  name: \"SoLabPage\",\n  data() {\n    return {\n      Es_1: false,\n      Es_A9:false,\n    }\n  },\n\n  // mounted\n  methods: {\n    openCard(card) {\n      switch (card) {\n        case 'Es_1':\n          this.Es_1 = !this.Es_1;\n          console.log(this.Es_1);\n          break;\n        case 'Es_A9':\n          this.Es_A9= !this.Es_A9;\n          console.log(this.Es_A9);\n          break;\n\n        default:\n          break;\n      }\n    }\n  },\n  props: {\n\n  },\n  mounted() {\n    window.Prism = window.Prism || {};\n    window.Prism.manual = true;\n    Prism.highlightAll(); // highlight your code on mount\n  },\n}\n</script>\n<style>\n.token.number,\n.token.tag {\n  all: inherit;\n  color: #905;\n}\n\npre {\n  width: 70%;\n}\n\np {\n  width: 70%;\n}\n\n</style>"]},"metadata":{},"sourceType":"module"}